type: edu
files:
- name: src/account/AccountServiceApplication.java
  visible: true
  text: |-
    package account;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class AccountServiceApplication {

        public static void main(String[] args) {
            SpringApplication.run(AccountServiceApplication.class, args);
        }

    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
    spring.jackson.serialization.INDENT_OUTPUT=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'com.h2database:h2'
        implementation group: 'org.hibernate', name: 'hibernate-validator', version: '6.1.0.Final'
    }
  learner_created: false
- name: test/AccountServiceTest.java
  visible: false
  text: |-
    import account.AccountServiceApplication;
    import com.fasterxml.jackson.annotation.JsonInclude;
    import com.fasterxml.jackson.core.JsonProcessingException;
    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.JsonArray;
    import com.google.gson.JsonElement;
    import com.google.gson.JsonObject;
    import com.google.gson.JsonParser;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.UnexpectedError;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.request.HttpRequest;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.springframework.http.HttpStatus;

    import java.util.*;
    import java.util.stream.Collectors;

    import static org.hyperskill.hstest.common.JsonUtils.getJson;
    import static org.hyperskill.hstest.common.JsonUtils.getPrettyJson;
    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    class TestReq {

      private Map<String, Object> properties = new LinkedHashMap<>();

      // Deep copy
      public TestReq(TestReq another) {
        this.properties = another.properties.entrySet().stream()
                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));
      }

      public TestReq() {
      }

      public String toJson() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);
        try {
          return mapper.writeValueAsString(this.properties);
        } catch (JsonProcessingException e) {
          System.out.println(e.getMessage());
          return null;
        }
      }

      public TestReq setProps(String key, Object value) {
        properties.put(key, value);
        return this;
      }

    }
    public class AccountServiceTest extends SpringTest {

      private  final String signUpApi = "/api/auth/signup";
      private  final String changePassApi = "/api/auth/changepass";
      private  final String getEmployeePaymentApi = "/api/empl/payment";
      private final String postPaymentApi = "/api/acct/payments";
      private final String putRoleApi = "/api/admin/user/role";
      private final String putAccessApi = "/api/admin/user/access";
      private final String adminApi = "/api/admin/user/";
      private final String auditorApi = "/api/security/events/";

      static String[] breachedPass= new String[]{"PasswordForJanuary", "PasswordForFebruary", "PasswordForMarch",
              "PasswordForApril", "PasswordForMay", "PasswordForJune",
              "PasswordForJuly", "PasswordForAugust", "PasswordForSeptember",
              "PasswordForOctober", "PasswordForNovember", "PasswordForDecember"};

      List<Integer> userIdList = new ArrayList<>();

      private final TestReq ivanIvanov = new TestReq().setProps("name", "Ivan")
              .setProps("lastname", "Ivanov")
              .setProps("email", "IvanIvanov@acme.com")
              .setProps("password", "rXoa4CvqpLxW");
      private final TestReq petrPetrov = new TestReq().setProps("name", "Petr")
              .setProps("lastname", "Petrov")
              .setProps("email", "PetrPetrov@acme.com")
              .setProps("password", "nWza98hjkLPE");
      private final TestReq johnDoe = new TestReq().setProps("name", "John")
              .setProps("lastname", "Doe")
              .setProps("email", "JohnDoe@acme.com")
              .setProps("password", "oMoa3VvqnLxW");
      private final TestReq maxMus = new TestReq().setProps("name", "Max")
              .setProps("lastname", "Mustermann")
              .setProps("email", "MaxMustermann@acme.com")
              .setProps("password", "ai0y9bMvyF6G");
      private final TestReq captainNemo = new TestReq().setProps("name", "Captain")
              .setProps("lastname", "Nemo")
              .setProps("email", "nautilus@pompilius.com")
              .setProps("password", "wings");

      private final String ivanIvanovCorrectUser = ivanIvanov.toJson();
      private final String petrPetrovCorrectUser = petrPetrov.toJson();
      private final String jDCorrectUser = johnDoe.toJson();
      private final String maxMusCorrectUser = maxMus.toJson();
      private final String maxMusLower = new TestReq(maxMus).setProps("email", "maxmustermann@acme.com").toJson();
      private final String maxMusWrongPassword = new TestReq(maxMus).setProps("password", "none").toJson();
      private final String petrPetrovWrongPassword = new TestReq(petrPetrov).setProps("password", "none").toJson();
      private final String maxMusWrongEmail = new TestReq(maxMus).setProps("email", "maxmustermann@google.com").toJson();
      private final String captainNemoWrongUser = captainNemo.toJson();
      private final String jDNewPass = new TestReq(johnDoe).setProps("password", "aNob5VvqzRtb").toJson();
      private final String jDPass = new TestReq().setProps("new_password", "aNob5VvqzRtb").toJson();

      private final String firstResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });
      private final String secondResponseAdminApi = convert(new String[]{
              new TestReq().setProps("id", 1).setProps("name", "John").setProps("lastname", "Doe")
                      .setProps("email", "johndoe@acme.com").setProps("roles", new String[] {"ROLE_ADMINISTRATOR"}).toJson(),
              new TestReq().setProps("id", 2).setProps("name", "Ivan").setProps("lastname", "Ivanov")
                      .setProps("email", "ivanivanov@acme.com")
                      .setProps("roles", new String[] {"ROLE_AUDITOR", "ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 3).setProps("name", "Max").setProps("lastname", "Mustermann")
                      .setProps("email", "maxmustermann@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson(),
              new TestReq().setProps("id", 5).setProps("name", "Petr").setProps("lastname", "Petrov")
                      .setProps("email", "petrpetrov@acme.com").setProps("roles", new String[] {"ROLE_USER"}).toJson()
      });

      private String[] auditorResponseApi = new String[]{
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "ivanivanov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role AUDITOR to ivanivanov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "maxmustermann@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "CREATE_USER").setProps("subject", "Anonymous")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/auth/signup").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@google.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "nautilus@pompilius.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "GRANT_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Grant role ACCOUNTANT to petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "REMOVE_ROLE").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Remove role ACCOUNTANT from petrpetrov@acme.com").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "DELETE_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "petrpetrov@acme.com").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "CHANGE_PASSWORD").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "johndoe@acme.com").setProps("path", "/api/auth/changepass").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user/role").setProps("path", "/api/admin/user/role").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "ivanivanov@acme.com")
                      .setProps("object", "/api/admin/user").setProps("path", "/api/admin/user").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/acct/payments").setProps("path", "/api/acct/payments").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "ACCESS_DENIED").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "/api/security/events").setProps("path", "/api/security/events").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "BRUTE_FORCE").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOCK_USER").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "Lock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson(), // api !!!
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "LOGIN_FAILED").setProps("subject", "maxmustermann@acme.com")
                      .setProps("object", "/api/empl/payment").setProps("path", "/api/empl/payment").toJson(),
              new TestReq().setProps("action", "UNLOCK_USER").setProps("subject", "johndoe@acme.com")
                      .setProps("object", "Unlock user maxmustermann@acme.com").setProps("path", "/api/admin/user/access").toJson()
      };

      public AccountServiceTest() {
        super(AccountServiceApplication.class, "../service_db.mv.db");
      }

      private String convert(String[] trs) {
        JsonArray  jsonArray = new JsonArray();
        for (String tr : trs) {
          JsonElement jsonObject = JsonParser.parseString(tr);
          jsonArray.add(jsonObject);
        }
        return jsonArray.toString();
      }

      CheckResult testApi(String user, String body, int status, String api, String method, String message) {

        HttpResponse response = checkResponseStatus(user, body, status, api, method, message);


        return CheckResult.correct();
      }

      /**
       * Method for checking response on Post request for signup API
       *
       * @param body string representation of body content in JSON format (String)
       * @param status required http status for response (int)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      CheckResult testPostSignUpResponse(String body, int status, String[] role) {

        HttpResponse response = checkResponseStatus(null, body, status, signUpApi, "POST", "");

        JsonObject rightResponse = getJson(body).getAsJsonObject();
        rightResponse.remove("password");

        // Check is it JSON in response or something else
        if (!response.getJson().isJsonObject()) {
          return CheckResult.wrong("Wrong object in response, expected JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonObject jsonResponse = response.getJson().getAsJsonObject();

        // Check if password is presence in response
        if (jsonResponse.get("password") != null) {
          return CheckResult.wrong("You must remove password from response\n" +
                  jsonResponse);
        }

        if (jsonResponse.get("id") == null) {
          return CheckResult.wrong("Response must contain user ID\n" +
                  "Received response:\n" +
                  jsonResponse);
        }



        // Check JSON in response
        expect(response.getContent()).asJson().check(
                isObject()
                        .value("id", isInteger())
                        .value("name", rightResponse.get("name").getAsString())
                        .value("lastname", rightResponse.get("lastname").getAsString())
                        .value("email", isString(s -> s.equalsIgnoreCase(rightResponse.get("email").getAsString())))
                        .value("roles", role));

        if (userIdList.contains(jsonResponse.get("id").getAsInt())) {
          return CheckResult.wrong("User ID must be unique!\n" +
                  "Received response:\n" +
                  jsonResponse);
        }

        userIdList.add(jsonResponse.get("id").getAsInt());
        return CheckResult.correct();
      }

      /**
       * Method for restarting application
       *
       */
      private CheckResult restartApplication() {
        try {
          reloadSpring();
        } catch (Exception ex) {
          throw new UnexpectedError(ex.getMessage());
        }
        return CheckResult.correct();
      }

      /**
       * Method for checking authentication
       *
       * @param user string representation of user information in JSON format (String)
       * @param status required http status for response (int)
       * @param message hint about reason of error (String)
       * @return instance of CheckResult class containing result of checks (CheckResult)
       */
      private CheckResult testUserRegistration(String user, int status, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, getEmployeePaymentApi, "GET", message);

        return CheckResult.correct();
      }

      CheckResult testChangePassword(String api, String body, int status, String user) {
        JsonObject userJson = getJson(user).getAsJsonObject();

        HttpResponse response = checkResponseStatus(user, body, status, api, "POST", "");

        // Check JSON in response
        if (status == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("email", userJson.get("email").getAsString().toLowerCase())
                          .value("status", "The password has been updated successfully"));
        }
        return CheckResult.correct();
      }

      private CheckResult testGetAdminApi(String api, int status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          // Check is it array of JSON in response or something else
          if (!response.getJson().isJsonArray()) {
            return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                    response.getContent().getClass());
          }
          JsonArray correctJson = getJson(answer).getAsJsonArray();
          JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();

          if (responseJson.size() == 0)  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          if (responseJson.size() != correctJson.size())  {
            return CheckResult.wrong("No data in response body" + "\n"
                    + "in response " + getPrettyJson(responseJson)  + "\n"
                    + "must be " + getPrettyJson(correctJson));
          }

          for (int i = 0; i < responseJson.size(); i++) {

            String[] roles = new String[correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size()];
            for(int j=0; j<correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").size(); j++) {
              roles[j]=correctJson.get(i).getAsJsonObject().getAsJsonArray("roles").get(j).getAsString();
            }

            expect(responseJson.get(i).getAsJsonObject().toString()).asJson()
                    .check(isObject()
                            .value("id", isInteger())
                            .value("name", correctJson.get(i).getAsJsonObject().get("name").getAsString())
                            .value("lastname", correctJson.get(i).getAsJsonObject().get("lastname").getAsString())
                            .value("email", correctJson.get(i).getAsJsonObject().get("email").getAsString())
                            .value("roles", isArray( roles )));
          }
        }
        return CheckResult.correct();
      }

      CheckResult testPutAdminApi(String api, HttpStatus status, String user, String reqUser,
                                  String role, String operation, String[] respRoles, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);
        request.addProperty("role", role);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("id", isInteger())
                          .value("name", jsonUser.get("name").getAsString())
                          .value("lastname", jsonUser.get("lastname").getAsString())
                          .value("email", jsonUser.get("email").getAsString().toLowerCase())
                          .value("roles", isArray(respRoles)));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", respRoles[0])
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testPutAccessApi(String api, HttpStatus status, String user, String reqUser,
                                   String operation, String answer, String message) {

        JsonObject jsonUser = getJson(reqUser).getAsJsonObject();
        JsonObject request = new JsonObject();
        request.addProperty("user", jsonUser.get("email").getAsString());
        request.addProperty("operation", operation);

        HttpResponse response = checkResponseStatus(user, request.toString(), status.value(), api, "PUT", message);

        // Check JSON in response

        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("status", answer));
        } else {
          expect(response.getContent()).asJson()
                  .check(isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }


        return CheckResult.correct();
      }

      CheckResult testLocking(String api, HttpStatus status, String user, String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(), api, "GET", message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      CheckResult testRoleModelNegative(String api, String method, HttpStatus status, String user, String body, String message) {

        HttpResponse response = checkResponseStatus(user, body, status.value(), api, method.toUpperCase(), message);

        // Check JSON in response
        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api)
                          .value("status", status.value())
                          .value("message", "Access Denied!")
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }

      private CheckResult testAuditorApi(String api, int status, String user, String answer,
                                         int position, String message) {

        HttpResponse response = checkResponseStatus(user, "", status, api, "GET", message);

        // Check is it array of JSON in response or something else
        if (!response.getJson().isJsonArray()) {
          return CheckResult.wrong("Wrong object in response, expected array of JSON but was \n" +
                  response.getContent().getClass());

        }

        JsonArray correctJson = getJson(answer).getAsJsonArray();
        JsonArray responseJson = getJson(response.getContent()).getAsJsonArray();
        if (responseJson.size() == 0) {
          throw new WrongAnswer("Empty array in response!");
        }

        if (responseJson.size() != correctJson.size()) {
          throw new WrongAnswer("Incorrect number - " +  responseJson.size() +
                  " events in response, must be - " + correctJson.size() + "\n" +
                  "response:\n" + getPrettyJson(responseJson)  + "\n" +
                  "must be:\n " + getPrettyJson(correctJson));
        }

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(responseJson.get(position).toString()).asJson().check(
                  isObject()
                          .value("action", correctJson.get(position).getAsJsonObject().get("action").getAsString())
                          .value("subject", correctJson.get(position).getAsJsonObject().get("subject").getAsString())
                          .value("object", isString( o -> o.contains(correctJson.get(position).getAsJsonObject().get("object").getAsString())))
                          .value("path", isString())
                          .anyOtherValues());

        }
        return CheckResult.correct();
      }

      CheckResult testDeleteAdminApi(String api, HttpStatus status, String user, String param,
                                     String answer, String message) {

        HttpResponse response = checkResponseStatus(user, "", status.value(),
                api + param, "DELETE", message);

        // Check JSON in response
        if (response.getStatusCode() == 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("user", param.toLowerCase())
                          .value("status", answer));
        }

        if (response.getStatusCode() != 200) {
          expect(response.getContent()).asJson().check(
                  isObject()
                          .value("error", status.getReasonPhrase())
                          .value("path", api + param)
                          .value("status", status.value())
                          .value("message", answer)
                          .anyOtherValues());
        }
        return CheckResult.correct();
      }


      /**
       * Method for testing api response
       *
       * @param user string representation of user information in JSON format (String)
       * @param body request body (String)
       * @param status expected response status (int)
       * @param api testing api (String)
       * @param method method for api (String)
       * @param message test hints for student (String)
       * @return response (HttpResponse)
       */
      private HttpResponse checkResponseStatus(String user, String body,
                                               int status, String api, String method, String message) {
        HttpRequest request = null;
        switch (method) {
          case "GET":
            request = get(api);
            break;
          case "POST":
            request = post(api, body);
            break;
          case "PUT":
            request = put(api, body);
            break;
          case "DELETE":
            request = delete(api);
            break;
        }

        if (user != null) {
          JsonObject userJson = getJson(user).getAsJsonObject();
          String password = userJson.get("password").getAsString();
          String login = userJson.get("email").getAsString().toLowerCase();
          request = request.basicAuth(login, password);
        }
        HttpResponse response = request.send();

        if (response.getStatusCode() != status) {
          throw new WrongAnswer(method + " " + api  + " should respond with "
                  + "status code " + status + ", responded: " + response.getStatusCode() + "\n"
                  + message + "\n"
                  + "Response body:\n" + response.getContent() + "\n");
        }
        return response;
      }

      private String getSub (String[] src, int position) {
        return convert(Arrays.copyOfRange(src, 0, position));
      }

      @DynamicTest
      DynamicTesting[] dt = new DynamicTesting[] {

              // Create administrator and auditor
              () -> testPostSignUpResponse(jDCorrectUser, 200, new String[] {"ROLE_ADMINISTRATOR"}), // 1
              () -> testPostSignUpResponse(ivanIvanovCorrectUser, 200, new String[] {"ROLE_USER"}), // 2
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      ivanIvanovCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"ROLE_AUDITOR", "ROLE_USER"}, ""), // 3

              // Testing user registration positive tests
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 0,"'CREATE_USER' security event missing"), // 4
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 1,"'CREATE_USER' security event missing"), // 5
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 3), 2,"'GRANT_ROLE' security event missing"), // 6
              () -> testPostSignUpResponse(maxMusLower, 200, new String[] {"ROLE_USER"}), // 7
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 4), 3,"'CREATE_USER' security event missing"), // 8
              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}), // 9
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 5), 4,"'CREATE_USER' security event missing"), // 10

    //
    //          // Test authentication, positive tests
              () -> testUserRegistration(maxMusLower, 200, "User must login!"), // 11
              () -> testUserRegistration(maxMusCorrectUser, 200, "Login case insensitive!"), // 12
    //
    //          // Test authentication, negative tests
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 13
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 6), 5,"'LOGIN_FAILED' security event missing"), // 14
              () -> testUserRegistration(maxMusWrongEmail, 401, "Wrong password!"), // 15
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 7), 6,"'LOGIN_FAILED' security event missing"), // 16
              () -> testUserRegistration(captainNemoWrongUser, 401, "Wrong user"), // 17
              () -> testApi(null, "", 401, getEmployeePaymentApi, "GET",
                      "This api only for authenticated user"), // 18
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 8), 7,"'LOGIN_FAILED' security event missing"), // 19

    //          // Testing persistence
              () -> restartApplication(), // 20
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login, after restarting!" +
                      " Check persistence."), // 21

              // Changing roles
              () -> testPutAdminApi(putRoleApi, HttpStatus.BAD_REQUEST, jDCorrectUser,
                      jDCorrectUser, "AUDITOR", "GRANT",
                      new String[] {"The user cannot combine administrative and business roles!"},
                      "Trying add administrative role to business user!"), // 22
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "GRANT",
                      new String[] {"ROLE_ACCOUNTANT", "ROLE_USER"}, "Trying to add role ACCOUNTANT to user"), // 23
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 9), 8,"'GRANT_ROLE' security event missing"), // 24
              () -> testPutAdminApi(putRoleApi, HttpStatus.OK, jDCorrectUser,
                      petrPetrovCorrectUser, "ACCOUNTANT", "REMOVE",
                      new String[] {"ROLE_USER"}, "Trying to remove role ACCOUNTANT from user"), // 25
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 10), 9,"'REMOVE_ROLE' security event missing"), // 26

              //Delete user
              () -> testDeleteAdminApi("/api/admin/user/", HttpStatus.OK, jDCorrectUser,
                      "petrpetrov@acme.com", "Deleted successfully!", "Trying to delete user"), // 27
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 11), 10,"'DELETE_USER' security event missing"), // 28

              // Change password
              () -> testChangePassword(changePassApi, jDPass, 200, jDCorrectUser), // 29
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 12), 11,"'CHANGE_PASSWORD' security event missing"), // 30

              // Testing role model negative case
              () -> testRoleModelNegative(putRoleApi, "PUT", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 31
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 13), 12,"'ACCESS_DENIED' security event missing"), // 32
              () -> testRoleModelNegative(adminApi, "GET", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 33
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 14), 13,"'ACCESS_DENIED' security event missing"), // 34
              () -> testRoleModelNegative(adminApi, "DELETE", HttpStatus.FORBIDDEN, ivanIvanovCorrectUser,
                      "", "Trying to access administrative endpoint with business user"), // 35
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 15), 14,"'ACCESS_DENIED' security event missing"), // 36
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 37
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 16), 15,"'ACCESS_DENIED' security event missing"), // 38
              () -> testRoleModelNegative(postPaymentApi, "POST", HttpStatus.FORBIDDEN, maxMusCorrectUser,
                      "", "Trying to access endpoint with wrong role"), // 39
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 17), 16,"'ACCESS_DENIED' security event missing"), // 40
              () -> testRoleModelNegative(getEmployeePaymentApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 41
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 18), 17,"'ACCESS_DENIED' security event missing"), // 42

              () -> testRoleModelNegative(auditorApi, "GET", HttpStatus.FORBIDDEN, jDNewPass,
                      "", "Trying to access business endpoint with administrative user"), // 43
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 19), 18,"'ACCESS_DENIED' security event missing"), // 44

              // Testing locking user
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 45
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 20), 19,"'LOGIN_FAILED' security event missing"), // 46
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 47
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 21), 20,"'LOGIN_FAILED' security event missing"), // 48
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 49
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 22), 21,"'LOGIN_FAILED' security event missing"), // 50
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 51
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 23), 22,"'LOGIN_FAILED' security event missing"), // 52
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 53
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 23,"'LOGIN_FAILED' security event missing"), // 54
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password"), // 55
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 26), 24,"'BRUTE_FORCE' security event missing"), // 56
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"UNLOCK",
                      "User maxmustermann@acme.com unlocked!", "User must be unlocked through admin endpoint"), // 57
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 25,"'LOCK_USER' security event missing"), // 58
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 27), 26,"'UNLOCK_USER' security event missing"), // 59
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 60
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 28), 27,"'LOGIN_FAILED' security event missing"), // 61
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 62
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 29), 28,"'LOGIN_FAILED' security event missing"), // 63
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 64
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 30), 29,"'LOGIN_FAILED' security event missing"), // 65
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 66
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 31), 30,"'LOGIN_FAILED' security event missing"), // 67
              () -> testUserRegistration(maxMusCorrectUser, 200, "User must login!"), // 68
              () -> testUserRegistration(maxMusWrongPassword, 401, "Wrong password!"), // 69
              () -> testUserRegistration(maxMusCorrectUser, 200,
                      "Counter of failed login attempts must be reset after successfully login!"), // 70
              () -> testPutAccessApi(putAccessApi, HttpStatus.OK, jDNewPass,
                      maxMusCorrectUser,"LOCK",
                      "User maxmustermann@acme.com locked!", ""), // 71
              () -> testAuditorApi(auditorApi, 200, ivanIvanovCorrectUser,
                      getSub(auditorResponseApi, 33), 31,"'LOCK_USER' security event missing"), // 72
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, maxMusCorrectUser,
                      "User account is locked", "User must be locked through admin endpoint"), // 72
              () -> testPutAccessApi(putAccessApi, HttpStatus.BAD_REQUEST, jDNewPass,
                      jDCorrectUser,"LOCK",
                      "Can't lock the ADMINISTRATOR!", ""),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      firstResponseAdminApi, "Api must be available to admin user"),

              () -> testPostSignUpResponse(petrPetrovCorrectUser, 200, new String[] {"ROLE_USER"}),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "User must be locked only after 5 attempts with wrong password"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovCorrectUser, 200,
                      "In case of a successful login, reset the counter of the failed attempt."),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testUserRegistration(petrPetrovWrongPassword, 401, "Wrong password!"),
              () -> testLocking(getEmployeePaymentApi, HttpStatus.UNAUTHORIZED, petrPetrovCorrectUser,
                      "User account is locked", "User must be locked after 5 attempts with wrong password!"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 401, jDCorrectUser,
                      firstResponseAdminApi, "Wrong password for admin"),
              () -> testGetAdminApi(adminApi, 200, jDNewPass,
                      secondResponseAdminApi, "Api must be available to admin user")
      };

    }
  learner_created: false
- name: src/account/ChangePassRequestForm.java
  visible: true
  text: |
    package account;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import jakarta.validation.constraints.NotEmpty;
    import jakarta.validation.constraints.Size;

    public class ChangePassRequestForm {

        @JsonProperty("new_password")
        private String newPassword;

        public String getNewPassword() {
            return newPassword;
        }

        public void setNewPassword(String newPassword) {
            this.newPassword = newPassword;
        }
    }
  learner_created: true
- name: src/account/RestExceptionHandler.java
  visible: true
  text: |-
    package account;

    import jakarta.validation.ConstraintViolationException;
    import org.springframework.http.*;
    import org.springframework.web.bind.MethodArgumentNotValidException;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.bind.annotation.RestControllerAdvice;
    import org.springframework.web.context.request.WebRequest;
    import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

    import java.nio.file.AccessDeniedException;
    import java.time.LocalDateTime;
    import java.util.LinkedHashMap;

    @RestControllerAdvice
    public class RestExceptionHandler extends ResponseEntityExceptionHandler {

        @ExceptionHandler({CustomException.class})
        public ResponseEntity<Object> handleCustomException(
                CustomException e,
                WebRequest request
        ) {
            LinkedHashMap<String, Object> body = e.getErrorBody();
            body.put("path", request.getDescription(false).replaceFirst("uri=", ""));
            return new ResponseEntity<>(e.getErrorBody(), e.getStatus());
        }

        @ExceptionHandler({PaymentDuplicateException.class})
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        public ResponseEntity<Object> handlePaymentDuplicateException(
                PaymentDuplicateException e,
                WebRequest request
        ) {
            LinkedHashMap<String, Object> map = new LinkedHashMap<>();

            map.put("timestamp", LocalDateTime.now());
            map.put("status", 400);
            map.put("error", "Bad Request");
            map.put("message", e.getMessage());
            map.put("path", request.getDescription(false).replaceFirst("uri=", ""));

            return new ResponseEntity<>(map, HttpStatus.BAD_REQUEST);
        }


        @ExceptionHandler({ConstraintViolationException.class})
        @ResponseStatus(HttpStatus.BAD_REQUEST)
        protected ResponseEntity<Object> handleConstraintViolationException(
                ConstraintViolationException e,
                WebRequest request
        ) {
            LinkedHashMap<String, Object> map = new LinkedHashMap<>();

            map.put("timestamp", LocalDateTime.now());
            map.put("status", 400);
            map.put("error", "Bad Request");
            map.put("message", e.getMessage());
            map.put("path", request.getDescription(false).replaceFirst("uri=", ""));

            return new ResponseEntity<>(map, HttpStatus.BAD_REQUEST);
        }



        @Override
        protected ResponseEntity<Object> handleMethodArgumentNotValid(
                MethodArgumentNotValidException ex,
                HttpHeaders headers,
                HttpStatusCode status,
                WebRequest request
        ) {
            LinkedHashMap<String, Object> map = new LinkedHashMap<>();

            map.put("timestamp", LocalDateTime.now());
            map.put("status", 400);
            map.put("error", "Bad Request");
            map.put("message", ex.getMessage());
            map.put("path", request);

            return new ResponseEntity<>(map, HttpStatus.BAD_REQUEST);
        }

    }
  learner_created: true
- name: src/account/Payment.java
  visible: true
  text: |
    package account;

    import com.fasterxml.jackson.annotation.JsonFormat;
    import com.fasterxml.jackson.annotation.JsonProperty;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import jakarta.persistence.*;
    import jakarta.validation.constraints.Min;
    import org.springframework.format.annotation.DateTimeFormat;

    import java.time.LocalDate;
    import java.util.Locale;

    @Entity
    @Table(name = "payments")
    public class Payment {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @JsonProperty("employee")
        private String username;

        private LocalDate period;

        private long salary;

        public Payment() {
        }

        public Payment(String username, LocalDate period, long salary) {
            this.username = username;
            this.period = period;
            this.salary = salary;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public LocalDate getPeriod() {
            return period;
        }

        public void setPeriod(LocalDate period) {
            this.period = period;
        }

        public long getSalary() {
            return salary;
        }

        public void setSalary(long salary) {
            this.salary = salary;
        }

    }
  learner_created: true
- name: src/account/UserConverter.java
  visible: true
  text: |
    package account;

    import java.util.TreeSet;

    public class UserConverter {

        public static UserResponseTransfer convert(User user) {
            UserResponseTransfer userResponseTransfer = new UserResponseTransfer();
            userResponseTransfer.setId(user.getId());
            userResponseTransfer.setName(user.getName());
            userResponseTransfer.setEmail(user.getUsername());
            userResponseTransfer.setLastname(user.getLastname());

            TreeSet<String> roles = new TreeSet<>();
            user.getUserGroups().stream()
                    .map(Group::getCode)
                    .forEach(roles::add);

            userResponseTransfer.setRoles(roles);

            return userResponseTransfer;
        }

    }
  learner_created: true
- name: src/account/UserResponseTransfer.java
  visible: true
  text: |-
    package account;

    import java.util.TreeSet;

    public class UserResponseTransfer {

        private long id;
        private String name;
        private String lastname;
        private String email;
        private TreeSet<String> roles;

        public UserResponseTransfer() {
        }

        public UserResponseTransfer(long id, String name, String lastname, String email, TreeSet<String> roles) {
            this.id = id;
            this.name = name;
            this.lastname = lastname;
            this.email = email;
            this.roles = roles;
        }

        public long getId() {
            return id;
        }

        public void setId(long id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getEmail() {
            return email;
        }

        public void setEmail(String email) {
            this.email = email;
        }

        public TreeSet<String> getRoles() {
            return roles;
        }

        public void setRoles(TreeSet<String> roles) {
            this.roles = roles;
        }

    }
  learner_created: true
- name: src/account/UserDetailsServiceImpl.java
  visible: true
  text: "package account;\n\nimport org.springframework.beans.factory.annotation.Autowired;\n\
    import org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\n\
    import org.springframework.security.core.userdetails.UsernameNotFoundException;\n\
    import org.springframework.stereotype.Service;\n\nimport java.util.Locale;\n\n\
    @Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n\
    \n    @Autowired\n    UserRepository userRepo;\n    \n    @Override\n    public\
    \ UserDetails loadUserByUsername(String username) throws UsernameNotFoundException\
    \ {\n        User user = userRepo.findByUsername(username.toLowerCase(Locale.ROOT)).orElse(null);\n\
    \n        if (user == null) {\n            throw new UsernameNotFoundException(\"\
    Not found\");\n        }\n\n        return new UserDetailsImpl(user);\n    }\n\
    }"
  learner_created: true
- name: src/account/GroupRepository.java
  visible: true
  text: |
    package account;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface GroupRepository extends CrudRepository<Group, Long> {

        Optional<Group> findByCode(String code);
    }
  learner_created: true
- name: src/account/AdminFunctionalityController.java
  visible: true
  text: |
    package account;

    import jakarta.persistence.criteria.CriteriaBuilder;
    import jakarta.transaction.Transactional;
    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.security.access.annotation.Secured;
    import org.springframework.web.bind.annotation.*;

    import java.util.*;

    @RestController
    public class AdminFunctionalityController {

        @Autowired
        UserRepository userRepo;

        @Autowired
        GroupRepository groupRepo;

        @GetMapping(path = "/api/admin/user/")
        public TreeSet<UserResponseTransfer> getUsers() {
            TreeSet<UserResponseTransfer> users = new TreeSet<>(new UserResponseTransferComparatorById());

            userRepo.findAll()
                    .forEach(user -> {
                        users.add(UserConverter.convert(user));
                    });

            return users;
        }

        @Transactional
        @Secured("ROLE_ADMINISTRATOR")
        @DeleteMapping(path = {
                "api/admin/user/{username}",
                "api/admin/user/",
                "api/admin/user"
        })
        public LinkedHashMap<String, String> deleteUser(@PathVariable(required = false) String username) {
            LinkedHashMap<String, String> deleteUserResponseForm = new LinkedHashMap<>();

            if (userRepo.existsByUsername(username)) {
                if (userRepo.findByUsername(username)
                        .get()
                        .getUserGroups()
                        .stream()
                        .map(Group::getCode)
                        .anyMatch(code -> code.equals("ROLE_ADMINISTRATOR"))) {
                    throw new CustomException(
                            "Can't remove ADMINISTRATOR role!",
                            HttpStatus.BAD_REQUEST
                    );
                }

                userRepo.deleteByUsername(username);

                deleteUserResponseForm.put("user", username);
                deleteUserResponseForm.put("status", "Deleted successfully!");

                return deleteUserResponseForm;

            } else {
                throw new CustomException(
                        "User not found!",
                        HttpStatus.NOT_FOUND
                );
            }
        }

        @PutMapping(path = "/api/admin/user/role")
        public UserResponseTransfer changeRole(@Valid @RequestBody ChangeRoleRequestForm changeRoleRequestForm) {
            String role = "ROLE_" + changeRoleRequestForm.getRole();
            String username = changeRoleRequestForm.getUser().toLowerCase(Locale.ROOT);

            User user = userRepo.findByUsername(username).orElse(null);

            if (user == null) {
                throw new CustomException(
                    "User not found!",
                    HttpStatus.NOT_FOUND
                );
            }

            Group group = groupRepo.findByCode(role).orElse(null);

            if (group == null) {
                throw new CustomException(
                        "Role not found!",
                        HttpStatus.NOT_FOUND
                );
            }

            if (changeRoleRequestForm.getOperation().equals("GRANT")) {
                Set<String> allRoles = new HashSet<>();
                allRoles.add(role);
                allRoles.addAll(user.getUserGroups().stream()
                        .map(Group::getCode)
                        .toList());

                if (allRoles.contains("ROLE_ADMINISTRATOR") &&
                        (allRoles.contains("ROLE_USER") ||
                                allRoles.contains("ROLE_ACCOUNTANT"))) {
                    throw new CustomException(
                            "The user cannot combine administrative and business roles!",
                            HttpStatus.BAD_REQUEST
                    );
                }

                user.addUserGroup(group);
                userRepo.save(user);

            } else {
                if (group.getCode().equals("ROLE_ADMINISTRATOR")) {
                    throw new CustomException(
                            "Can't remove ADMINISTRATOR role!",
                            HttpStatus.BAD_REQUEST
                    );
                }

                if (user.hasUserGroup(group)) {
                    if (user.getNumberOfGroups() == 1) {
                        throw new CustomException(
                                "The user must have at least one role!",
                                HttpStatus.BAD_REQUEST
                        );
                    }

                    user.removeUserGroup(group);
                    userRepo.save(user);

                } else {
                    throw new CustomException(
                            "The user does not have a role!",
                            HttpStatus.BAD_REQUEST
                    );
                }
            }

            return UserConverter.convert(user);
        }

    }
  learner_created: true
- name: src/account/SecurityConfiguration.java
  visible: true
  text: |-
    package account;

    import com.fasterxml.jackson.databind.ObjectMapper;
    import com.google.gson.Gson;
    import com.google.gson.GsonBuilder;
    import jakarta.servlet.ServletException;
    import jakarta.servlet.ServletOutputStream;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import jakarta.transaction.Transactional;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.boot.json.GsonJsonParser;
    import org.springframework.context.annotation.Bean;
    import org.springframework.context.annotation.Configuration;
    import org.springframework.http.HttpMethod;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.MediaType;
    import org.springframework.security.access.AccessDeniedException;
    import org.springframework.security.authentication.AuthenticationManager;
    import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
    import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
    import org.springframework.security.config.annotation.web.builders.HttpSecurity;
    import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
    import org.springframework.security.config.http.SessionCreationPolicy;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.core.userdetails.UserDetailsService;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.security.web.SecurityFilterChain;
    import org.springframework.security.web.access.AccessDeniedHandler;
    import org.springframework.security.web.access.AccessDeniedHandlerImpl;
    import org.springframework.security.web.authentication.AuthenticationFailureHandler;

    import java.io.IOException;
    import java.io.PrintWriter;
    import java.time.LocalDateTime;
    import java.util.LinkedHashMap;

    @Configuration
    @EnableWebSecurity
    public class SecurityConfiguration {

        @Autowired
        UserDetailsService userDetailService;

        @Autowired
        RestAuthenticationEntryPoint restAuthenticationEntryPoint;

        @Bean
        public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
            http
                    .authorizeHttpRequests((authz) -> authz
                            .requestMatchers(HttpMethod.POST, "/api/auth/signup").permitAll()
                            .requestMatchers(HttpMethod.POST, "/api/auth/changepass").hasAnyRole(
                                    Role.USER.name(),
                                    Role.ACCOUNTANT.name(),
                                    Role.ADMINISTRATOR.name()
                            )
                            .requestMatchers(HttpMethod.GET, "/api/empl/payment").hasAnyRole(
                                    Role.USER.name(),
                                    Role.ACCOUNTANT.name()
                            )
                            .requestMatchers(HttpMethod.POST, "/api/acct/payments").hasRole(Role.ACCOUNTANT.name())
                            .requestMatchers(HttpMethod.PUT, "/api/acct/payments").hasRole(Role.ACCOUNTANT.name())
                            .requestMatchers(HttpMethod.GET, "/api/admin/user/").hasRole(Role.ADMINISTRATOR.name())
                            .requestMatchers(HttpMethod.DELETE, "api/admin/user/{username}",
                                    "api/admin/user/").hasRole(Role.ADMINISTRATOR.name())
                            .requestMatchers(HttpMethod.PUT, "/api/admin/user/role").hasRole(Role.ADMINISTRATOR.name())
                            .anyRequest().permitAll()
                    )
                    .csrf().disable().headers().frameOptions().disable()
                    .and()
                    .exceptionHandling().accessDeniedHandler((request, response, accessDeniedException) -> {
                        Gson gson = new GsonBuilder()
                                .setPrettyPrinting()
                                .create();

                        LinkedHashMap<String, Object> errorBody = new LinkedHashMap<>();
                        //errorBody.put("timestamp", LocalDateTime.now());
                        errorBody.put("status", 403);
                        errorBody.put("error", "Forbidden");
                        errorBody.put("message", "Access Denied!");
                        errorBody.put("path", request.getRequestURI());

                        String errorBodyJsonString = gson.toJson(errorBody);

                        PrintWriter out = response.getWriter();
                        response.setContentType("application/json");
                        response.setCharacterEncoding("UTF-8");
                        response.setStatus(403);
                        out.print(errorBodyJsonString);
                        out.flush();
                    })
                    .and()
                    .sessionManagement()
                    .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
                    .and()
                    .httpBasic().authenticationEntryPoint(restAuthenticationEntryPoint);
            return http.build();
        }

        @Transactional
        @Bean
        public DaoAuthenticationProvider authProvider() {
            DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
            authProvider.setUserDetailsService(userDetailService);
            authProvider.setPasswordEncoder(getEncoder());
            return authProvider;
        }

        @Transactional
        @Bean
        public AuthenticationManager authManager(HttpSecurity http) throws Exception {
            AuthenticationManagerBuilder authenticationManagerBuilder =
                    http.getSharedObject(AuthenticationManagerBuilder.class);
            authenticationManagerBuilder.authenticationProvider(authProvider());
            return authenticationManagerBuilder.build();
        }

        @Bean
        public PasswordEncoder getEncoder() {
            return new BCryptPasswordEncoder();
        }
    }
  learner_created: true
- name: src/account/ChangeTheSalaryResponseForm.java
  visible: true
  text: |
    package account;

    import java.time.LocalDate;
    import java.util.Locale;

    public class ChangeTheSalaryResponseForm {

        private String name;
        private String lastname;
        private String period;
        private String salary;

        public ChangeTheSalaryResponseForm() {
        }

        public ChangeTheSalaryResponseForm(String name, String lastname, LocalDate period, long salary) {
            this.name = name;
            this.lastname = lastname;

            String monthName = period.getMonth().name().toLowerCase();
            monthName = monthName.replaceFirst("^.", String.valueOf(monthName.charAt(0)).toUpperCase(Locale.ROOT));
            this.period = String.format("%s-%d", monthName, period.getYear());

            long dollars = salary / 100;
            long cents = salary % 100;
            this.salary = String.format("%d dollar(s) %d cent(s)", dollars, cents);
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setLastname(String lastname) {
            this.lastname = lastname;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public String getSalary() {
            return salary;
        }

        public void setSalary(String salary) {
            this.salary = salary;
        }
    }
  learner_created: true
- name: src/account/BreachedPasswordsRepository.java
  visible: true
  text: |
    package account;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    @Repository
    public interface BreachedPasswordsRepository extends CrudRepository<BreachedPassword, Long> {

        boolean existsByPassword(String password);
    }
  learner_created: true
- name: src/account/AuthenticationController.java
  visible: true
  text: |-
    package account;

    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.crypto.password.PasswordEncoder;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.ResponseBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.Collection;
    import java.util.Locale;
    import java.util.Set;
    import java.util.TreeSet;

    @RestController
    public class AuthenticationController {

        @Autowired
        BreachedPasswordsRepository breachedPasswordsRepo;

        @Autowired
        UserRepository userRepo;

        @Autowired
        PasswordEncoder encoder;

        @Autowired
        GroupRepository groupRepo;

        @PostMapping(path = {
                "api/auth/signup/",
                "api/auth/signup"
        })
        @ResponseBody
        public UserResponseTransfer registerUser(@Valid @RequestBody User user) {
            String password = user.getPassword();
            if (breachedPasswordsRepo.existsByPassword(password)) {
                throw new BreachedPasswordException();
            }

            if (password.length() < 12) {
                throw new WrongPasswordSizeException();
            }

            user.setUsername(user.getUsername().toLowerCase(Locale.ROOT));

            if (userRepo.existsByUsername(user.getUsername())) {
                throw new UserExistException();
            }

            user.setPassword(encoder.encode(user.getPassword()));

            updateUserGroup(user);
            userRepo.save(user);

            return UserConverter.convert(user);
        }

        private void updateUserGroup(User user) {
            Group group = groupRepo.findByCode(
                userRepo.count() == 0 ? "ROLE_ADMINISTRATOR" : "ROLE_USER"
            ).get();
            user.addUserGroup(group);
        }

    }
  learner_created: true
- name: src/account/BreachedPasswordException.java
  visible: true
  text: |
    package account;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "The password is in the hacker's database!")
    public class BreachedPasswordException extends RuntimeException {
    }
  learner_created: true
- name: src/account/PaymentRepository.java
  visible: true
  text: |
    package account;

    import org.springframework.data.jpa.repository.Query;
    import org.springframework.data.repository.CrudRepository;
    import org.springframework.security.core.parameters.P;
    import org.springframework.stereotype.Repository;

    import java.time.LocalDate;
    import java.util.List;
    import java.util.Optional;

    @Repository
    public interface PaymentRepository extends CrudRepository<Payment, Long> {

        @Query("SELECT p FROM Payment p WHERE p.username = ?1 AND p.period = ?2")
        Payment findPaymentByUsernameAndPeriod(String username, LocalDate period);

        @Query("SELECT p FROM Payment p WHERE p.username = ?1 ORDER BY p.period DESC")
        List<Payment> findPaymentsByUsernameOrderByPeriodDesc(String username);

    }
  learner_created: true
- name: src/account/BreachedPassword.java
  visible: true
  text: |
    package account;

    import jakarta.persistence.*;

    @Entity
    @Table(name = "breached_passwords")
    public class BreachedPassword {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        private String password;

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }
    }
  learner_created: true
- name: src/account/UserResponseTransferComparatorById.java
  visible: true
  text: |
    package account;

    import java.util.Comparator;
    import java.util.Map;

    public class UserResponseTransferComparatorById implements Comparator<UserResponseTransfer> {

        @Override
        public int compare(UserResponseTransfer o1, UserResponseTransfer o2) {
            return Long.compare(o1.getId(), o2.getId());
        }
    }
  learner_created: true
- name: src/account/PasswordExistException.java
  visible: true
  text: |
    package account;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "The passwords must be different!")
    public class PasswordExistException extends RuntimeException {
    }
  learner_created: true
- name: src/account/PaymentDuplicateException.java
  visible: true
  text: |
    package account;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    public class PaymentDuplicateException extends RuntimeException {

        public PaymentDuplicateException(String message) {
            super(message);
        }
    }
  learner_created: true
- name: src/account/RestAuthenticationEntryPoint.java
  visible: true
  text: |-
    package account;

    import jakarta.servlet.ServletException;
    import jakarta.servlet.http.HttpServletRequest;
    import jakarta.servlet.http.HttpServletResponse;
    import org.springframework.security.core.AuthenticationException;
    import org.springframework.security.web.AuthenticationEntryPoint;
    import org.springframework.stereotype.Component;

    import java.io.IOException;

    @Component
    public class RestAuthenticationEntryPoint implements AuthenticationEntryPoint {

        @Override
        public void commence(
                HttpServletRequest request,
                HttpServletResponse response,
                AuthenticationException authException
        )
                throws
                IOException,
                ServletException
        {
            response.sendError(HttpServletResponse.SC_UNAUTHORIZED, authException.getMessage());
        }
    }
  learner_created: true
- name: src/account/DataLoader.java
  visible: true
  text: |
    package account;

    import jakarta.persistence.Column;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Component;

    @Component
    public class DataLoader {

        private final GroupRepository groupRepo;

        @Autowired
        public DataLoader(GroupRepository groupRepo) {
            this.groupRepo = groupRepo;
            createRoles();
        }

        private void createRoles() {
            try {
                groupRepo.save(new Group("ROLE_ADMINISTRATOR", "Admin Group"));
                groupRepo.save(new Group("ROLE_USER", "User Group"));
                groupRepo.save(new Group("ROLE_ACCOUNTANT", "Accountant Group"));
            } catch (Exception ignored) {
            }
        }
    }
  learner_created: true
- name: src/account/LocalDatePeriodParser.java
  visible: true
  text: |
    package account;

    import java.time.LocalDate;

    public class LocalDatePeriodParser {

        public static LocalDate parse(String period) {
            String[] monthAndYear = period.split("-");
            int month = Integer.parseInt(monthAndYear[0]);
            int year = Integer.parseInt(monthAndYear[1]);
            return LocalDate.of(year, month, 1);
        }
    }
  learner_created: true
- name: src/account/PaymentRequestBody.java
  visible: true
  text: |
    package account;

    import jakarta.persistence.criteria.CriteriaBuilder;
    import jakarta.validation.constraints.Min;
    import jakarta.validation.constraints.NotNull;
    import jakarta.validation.constraints.Pattern;

    import java.time.LocalDate;

    public class PaymentRequestBody {

        private String employee;

        @Pattern(regexp = "((0\\d)|(1[0-2]))-\\d{4}")
        private String period;

        @Min(0)
        private long salary;

        public String getEmployee() {
            return employee;
        }

        public void setEmployee(String employee) {
            this.employee = employee;
        }

        public String getPeriod() {
            return period;
        }

        public void setPeriod(String period) {
            this.period = period;
        }

        public long getSalary() {
            return salary;
        }

        public void setSalary(long salary) {
            this.salary = salary;
        }

    }
  learner_created: true
- name: src/account/ChangeRoleRequestForm.java
  visible: true
  text: |
    package account;

    import jakarta.validation.constraints.NotEmpty;
    import jakarta.validation.constraints.Pattern;
    import org.springframework.security.core.parameters.P;

    public class ChangeRoleRequestForm {

        @NotEmpty
        private String user;

        private String role;

        @Pattern(regexp = "(" +
                "GRANT|" +
                "REMOVE" +
                ")")
        private String operation;

        public String getUser() {
            return user;
        }

        public void setUser(String user) {
            this.user = user;
        }

        public String getRole() {
            return role;
        }

        public void setRole(String role) {
            this.role = role;
        }

        public String getOperation() {
            return operation;
        }

        public void setOperation(String operation) {
            this.operation = operation;
        }
    }
  learner_created: true
- name: src/account/UserExistException.java
  visible: true
  text: |
    package account;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "User exist!")
    public class UserExistException extends RuntimeException{
    }
  learner_created: true
- name: src/account/UserDetailsImpl.java
  visible: true
  text: |-
    package account;

    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.GrantedAuthority;
    import org.springframework.security.core.authority.SimpleGrantedAuthority;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.stereotype.Service;

    import java.util.ArrayList;
    import java.util.Collection;
    import java.util.List;
    import java.util.Locale;

    public class UserDetailsImpl implements UserDetails {

        private final String username;
        private final String password;
        private final List<GrantedAuthority> rolesAndAuthorities;

        public UserDetailsImpl(User user) {
            this.username = user.getUsername().toLowerCase(Locale.ROOT);
            this.password = user.getPassword();

            List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
            user.getUserGroups().stream()
                    .map(group -> new SimpleGrantedAuthority(group.getCode()))
                    .forEach(grantedAuthorities::add);
            this.rolesAndAuthorities = grantedAuthorities;
        }

        @Override
        public Collection<? extends GrantedAuthority> getAuthorities() {
            return rolesAndAuthorities;
        }

        @Override
        public String getPassword() {
            return password;
        }

        @Override
        public String getUsername() {
            return username;
        }

        @Override
        public boolean isAccountNonExpired() {
            return true;
        }

        @Override
        public boolean isAccountNonLocked() {
            return true;
        }

        @Override
        public boolean isCredentialsNonExpired() {
            return true;
        }

        @Override
        public boolean isEnabled() {
            return true;
        }
    }
  learner_created: true
- name: src/account/User.java
  visible: true
  text: |-
    package account;

    import com.fasterxml.jackson.annotation.JsonProperty;
    import jakarta.persistence.*;
    import jakarta.transaction.Transactional;
    import jakarta.validation.constraints.NotEmpty;
    import jakarta.validation.constraints.Pattern;

    import java.util.HashSet;
    import java.util.Set;

    @Entity
    @Table(name = "users")
    public class User {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @NotEmpty
        private String name;

        @NotEmpty
        private String lastname;

        @Pattern(regexp = ".+@acme\\.com")
        @NotEmpty
        @Column(unique = true)
        @JsonProperty(value = "email")
        private String username;

        @NotEmpty
        private String password;

        @ManyToMany(cascade = {
                CascadeType.PERSIST,
                CascadeType.MERGE
        },
                fetch = FetchType.EAGER
        )
        @JoinTable(name = "user_groups",
                joinColumns = @JoinColumn(name = "customer_id"),
                inverseJoinColumns = @JoinColumn(name = "group_id")
        )
        private Set<Group> userGroups = new HashSet<>();

        public void addUserGroup(Group group) {
            this.userGroups.add(group);
        }

        public void removeUserGroup(Group group) {
            this.userGroups.remove(group);
        }

        public boolean hasUserGroup(Group group) {
            return this.userGroups.contains(group);
        }

        public int getNumberOfGroups() {
            return userGroups.size();
        }

        public Set<Group> getUserGroups() {
            return userGroups;
        }

        public void setUserGroups(Set<Group> userGroups) {
            this.userGroups = userGroups;
        }

        public long getId() {
            return id;
        }

        public String getName() {
            return name;
        }

        public String getLastname() {
            return lastname;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getUsername() {
            return username;
        }

        public void setPassword(String password) {
            this.password = password;
        }

        public String getPassword() {
            return password;
        }
    }
  learner_created: true
- name: src/account/CustomException.java
  visible: true
  text: |+
    package account;

    import org.springframework.http.HttpStatus;

    import java.time.LocalDateTime;
    import java.util.LinkedHashMap;
    import java.util.Locale;

    public class CustomException extends RuntimeException {

        private LinkedHashMap<String, Object> errorBody;
        private HttpStatus status;

        public CustomException() {
        }

        public CustomException(String message, HttpStatus httpStatus) {
            LinkedHashMap<String, Object> errorBody = new LinkedHashMap<>();
            errorBody.put("timestamp", LocalDateTime.now());
            errorBody.put("status", httpStatus.value());
            errorBody.put("error", httpStatus.getReasonPhrase());
            errorBody.put("message", message);

            this.status = httpStatus;
            this.errorBody = errorBody;
        }


        public LinkedHashMap<String, Object> getErrorBody() {
            return errorBody;
        }

        public HttpStatus getStatus() {
            return status;
        }

    }

  learner_created: true
- name: src/account/WrongPasswordSizeException.java
  visible: true
  text: |
    package account;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(value = HttpStatus.BAD_REQUEST, reason = "Password length must be 12 chars minimum!")
    public class WrongPasswordSizeException extends RuntimeException {
    }
  learner_created: true
- name: src/account/MethodSecurityConfig.java
  visible: true
  text: |-
    package account;

    import org.springframework.context.annotation.Configuration;
    import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
    import org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration;

    @Configuration
    @EnableGlobalMethodSecurity(
            prePostEnabled = true,
            securedEnabled = true,
            jsr250Enabled = true)
    public class MethodSecurityConfig
            extends GlobalMethodSecurityConfiguration {
    }
  learner_created: true
- name: src/account/Role.java
  visible: true
  text: |
    package account;

    public enum Role {
        USER,
        ACCOUNTANT,
        ADMINISTRATOR
    }
  learner_created: true
- name: src/account/UserSettingsController.java
  visible: true
  text: |-
    package account;

    import jakarta.validation.Valid;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.LinkedHashMap;

    @RestController
    public class UserSettingsController {

        @Autowired
        BCryptPasswordEncoder passwordEncoder;

        @Autowired
        BreachedPasswordsRepository breachedPasswordsRepo;

        @Autowired
        UserRepository userRepo;

        @PostMapping(path = "/api/auth/changepass")
        public LinkedHashMap<String, String> changePassword(
                @AuthenticationPrincipal UserDetails userDetails,
                @Valid @RequestBody ChangePassRequestForm changePassRequestForm
        ) {
            String newPassword = changePassRequestForm.getNewPassword();

            if (newPassword.length() < 12) {
                throw new WrongPasswordSizeException();
            }

            if (breachedPasswordsRepo.existsByPassword(changePassRequestForm.getNewPassword())) {
                throw new BreachedPasswordException();
            }

            String oldPassword = userDetails.getPassword();

            if (passwordEncoder.matches(newPassword, oldPassword)) {
                throw new PasswordExistException();
            }

            User user = userRepo.findByUsername(userDetails.getUsername()).get();

            user.setPassword(passwordEncoder.encode(newPassword));
            userRepo.save(user);

            LinkedHashMap<String, String> responseForm = new LinkedHashMap<>();
            responseForm.put("email", user.getUsername());
            responseForm.put("status", "The password has been updated successfully");

            return responseForm;
        }
    }
  learner_created: true
- name: src/account/Group.java
  visible: true
  text: |
    package account;

    import jakarta.persistence.*;
    import jakarta.transaction.Transactional;

    import java.util.Objects;
    import java.util.Set;

    @Entity
    @Table(name = "principle_groups")
    public class Group {

        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private long id;

        @Column(unique = true, nullable = false)
        private String code;

        private String name;

        @ManyToMany(mappedBy = "userGroups", fetch = FetchType.EAGER)
        private Set<User> users;

        public Group() {
        }

        public Group(String code, String name) {
            this.code = code;
            this.name = name;
        }

        public long getId() {
            return id;
        }

        public String getCode() {
            return code;
        }

        public void setCode(String code) {
            this.code = code;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public Set<User> getUsers() {
            return users;
        }

        public void setUsers(Set<User> users) {
            this.users = users;
        }

        @Override
        public int hashCode() {
            int result = 17;
            result = 31 * result + (name == null ? 0 : name.hashCode());
            result = 31 * result + (code == null ? 0 : code.hashCode());
            result = 31 * result + (int) id;
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }

            if (!(obj instanceof Group)) {
                return false;
            }

            Group group = (Group) obj;

            return id == group.id &&
                    Objects.equals(code, group.code) &&
                    Objects.equals(name, group.name);
        }
    }
  learner_created: true
- name: src/account/UserRepository.java
  visible: true
  text: |
    package account;

    import org.springframework.data.repository.CrudRepository;
    import org.springframework.stereotype.Repository;

    import java.util.Optional;

    @Repository
    public interface UserRepository extends CrudRepository<User, Long> {

        boolean existsByUsername(String username);

        Optional<User> findByUsername(String username);

        void deleteByUsername(String username);
    }
  learner_created: true
- name: src/account/PaymentController.java
  visible: true
  text: |
    package account;

    import jakarta.transaction.Transactional;
    import jakarta.validation.Constraint;
    import jakarta.validation.ConstraintValidator;
    import jakarta.validation.ConstraintViolationException;
    import jakarta.validation.Valid;
    import jakarta.validation.constraints.Pattern;
    import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManager;
    import org.hibernate.validator.internal.engine.constraintvalidation.ConstraintValidatorManagerImpl;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.security.core.annotation.AuthenticationPrincipal;
    import org.springframework.security.core.userdetails.UserDetails;
    import org.springframework.validation.BindingResult;
    import org.springframework.validation.annotation.Validated;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    import java.time.LocalDate;
    import java.time.LocalDateTime;
    import java.time.format.DateTimeFormatter;
    import java.util.*;

    @RestController
    @Validated
    public class PaymentController {

        @Autowired
        UserRepository userRepo;

        @Autowired
        PaymentRepository paymentRepo;

        @Transactional
        @PostMapping(path = "api/acct/payments")
        public Map<String, String> uploadsPayrolls(@RequestBody List<@Valid PaymentRequestBody> payments) {
            for (PaymentRequestBody paymentRequestBody :
                    payments) {
                String username = paymentRequestBody.getEmployee();
                LocalDate period = LocalDatePeriodParser.parse(paymentRequestBody.getPeriod());

                if (paymentRepo.findPaymentByUsernameAndPeriod(username, period) != null) {
                    throw new PaymentDuplicateException("error!");
                }

                long salary = paymentRequestBody.getSalary();

                Payment payment = new Payment(username, period, salary);

                paymentRepo.save(payment);
            }

            return new HashMap<>(Map.of("status", "Added successfully!"));
        }

        @PutMapping(path = "api/acct/payments")
        public Map<String, String> changeTheSalary(@Valid @RequestBody PaymentRequestBody paymentRequestBody) {
            String username = paymentRequestBody.getEmployee();
            LocalDate period = LocalDatePeriodParser.parse(paymentRequestBody.getPeriod());

            Payment payment = paymentRepo.findPaymentByUsernameAndPeriod(username, period);

            long newSalary = paymentRequestBody.getSalary();
            payment.setSalary(newSalary);

            paymentRepo.save(payment);

            return new HashMap<>(Map.of("status", "Updated successfully!"));
        }

        @GetMapping(path = "api/empl/payment")
        public Object giveEmployeesPayrolls(
                @AuthenticationPrincipal UserDetails userDetails,
                @RequestParam(name = "period", required = false)
                @Pattern(regexp = "((0\\d)|(1[0-2]))-\\d{4}") String periodParam
        ) {
            User user = userRepo.findByUsername(userDetails.getUsername()).orElse(null);

            if (user == null) {
                throw new ResponseStatusException(HttpStatus.NOT_FOUND);
            }

            List<ChangeTheSalaryResponseForm> giveEmployeesPayrollsResponse = new ArrayList<>();

            String name = user.getName();
            String lastname = user.getLastname();
            if (periodParam != null) {
                LocalDate period = LocalDatePeriodParser.parse(periodParam);

                Payment payment = paymentRepo.findPaymentByUsernameAndPeriod(
                        user.getUsername(),
                        period
                );

                if (payment == null) {
                    throw new ResponseStatusException(HttpStatus.NOT_FOUND);
                } else {
                    return new ChangeTheSalaryResponseForm(
                            name,
                            lastname,
                            period,
                            payment.getSalary()
                    );
                }
            }

            paymentRepo.findPaymentsByUsernameOrderByPeriodDesc(user.getUsername())
                    .forEach(payment -> {
                        giveEmployeesPayrollsResponse.add(new ChangeTheSalaryResponseForm(
                                name,
                                lastname,
                                payment.getPeriod(),
                                payment.getSalary()
                        ));
                    });

            return giveEmployeesPayrollsResponse;
        }

    }
  learner_created: true
- name: src/account/EventName.java
  visible: true
  learner_created: true
- name: src/account/Event.java
  visible: true
  learner_created: true
- name: src/account/EventRepository.java
  visible: true
  learner_created: true
- name: src/account/LockUnlockUsersRequestForm.java
  visible: true
  learner_created: true
- name: src/account/SecurityController.java
  visible: true
  learner_created: true
- name: src/account/AuthenticationFailureListener.java
  visible: true
  learner_created: true
- name: src/account/AuthenticationSuccessListener.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/16606#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Thu, 06 Jul 2023 07:51:21 UTC"
record: 6
